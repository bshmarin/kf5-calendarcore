From 47b28e92c6ea1861ac621a21d33ff64044165ea9 Mon Sep 17 00:00:00 2001
From: Christoph Lenggenhager <clenggenhager@gmail.com>
Date: Wed, 10 Jun 2015 17:34:12 +0200
Subject: [PATCH 1/3] Use UTC times when calculating the transition dates of
 standard and dst phases.

Using UTC ensures that the rrule calculation does not encounter any invalid dates, e.g. during the hour lost when switching to DST.
This has two consequences:
1) A possible UNTIL date also *must* be defined in UTC. If this is not the case, any transformation to UTC will be a guess
2) The transitions do not have to be translated back to UTC

See https://github.com/mer-packages/kcalcore/pull/9 for discussion on this issue.
---
 src/icaltimezones.cpp | 22 ++++++++--------------
 1 file changed, 8 insertions(+), 14 deletions(-)

diff --git a/src/icaltimezones.cpp b/src/icaltimezones.cpp
index 603fbe848..f6728dd99 100644
--- a/src/icaltimezones.cpp
+++ b/src/icaltimezones.cpp
@@ -632,7 +632,6 @@ bool ICalTimeZoneParser::parsePhase(icalcomponent *c, bool daylight, ICalTimeZon
     }
 
     // Convert DTSTART to QDateTime, and from local time to UTC
-    const QDateTime localStart = toQDateTime(dtstart);     // local time
     dtstart.second -= prevOffset;
 #if defined(USE_ICAL_3)
     dtstart = icaltime_convert_to_zone(dtstart, icaltimezone_get_utc_timezone());
@@ -693,21 +692,16 @@ bool ICalTimeZoneParser::parsePhase(icalcomponent *c, bool daylight, ICalTimeZon
                 ICalFormat icf;
                 ICalFormatImpl impl(&icf);
                 impl.readRecurrence(icalproperty_get_rrule(p), &r);
-                r.setStartDt(localStart);
-                // The end date time specified in an RRULE should be in UTC.
-                // Convert to local time to avoid timesInInterval() getting things wrong.
-                if (r.duration() == 0) {
-                    QDateTime end(r.endDt());
-                    if (end.timeSpec() == Qt::UTC) {
-                        end.setTimeSpec(Qt::LocalTime);
-                        r.setEndDt(end.addSecs(prevOffset));
-                    }
+                r.setStartDt(utcStart);
+                // The end date time specified in an RRULE must be in UTC.
+                // We can not guarantee correctness if this is not the case.
+                if (r.duration() == 0 && r.endDt().timeSpec() != Qt::UTC) {
+                  qCWarning(KCALCORE_LOG) << "UNTIL in RRULE must be specified in UTC";
+                  break;
                 }
-                const auto dts = r.timesInInterval(localStart, maxTime);
+                const auto dts = r.timesInInterval(utcStart, maxTime);
                 for (int i = 0, end = dts.count();  i < end;  ++i) {
-                    QDateTime utc = dts[i];
-                    utc.setTimeSpec(Qt::UTC);
-                    phase.transitions += utc.addSecs(-prevOffset);
+                    phase.transitions += dts[i];
                 }
                 break;
             }
-- 
2.17.1

