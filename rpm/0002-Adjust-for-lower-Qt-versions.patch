From 8df7f131a10ec81f88c038263a233fc0ad6976e0 Mon Sep 17 00:00:00 2001
From: Damien Caliste <dcaliste@free.fr>
Date: Tue, 14 May 2019 11:35:15 +0200
Subject: [PATCH 2/2] Adjust for lower Qt versions.

---
 CMakeLists.txt                      |  7 ++-----
 autotests/testdateserialization.cpp |  8 ++++++++
 autotests/testfreebusyperiod.cpp    |  4 ++++
 autotests/testicalformat.cpp        |  6 +++++-
 autotests/testmemorycalendar.cpp    |  2 +-
 autotests/testrecurtodo.cpp         |  5 +++++
 autotests/testtimesininterval.cpp   | 12 +++++++++++
 src/calendar.cpp                    |  1 +
 src/icalformat.cpp                  |  1 +
 src/icalformat_p.cpp                |  5 ++++-
 src/occurrenceiterator.cpp          |  1 +
 src/recurrencerule.cpp              | 32 +++++++++++++++++++++++++++++
 src/utils_p.h                       |  8 ++++++++
 13 files changed, 84 insertions(+), 8 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index a61fb1cb1..3aef10e80 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -5,17 +5,16 @@ project(KCalendarCore VERSION ${KF_VERSION})
 
 # ECM setup
 include(FeatureSummary)
-find_package(ECM 5.83.0  NO_MODULE)
+find_package(ECM 5.75.0  NO_MODULE)
 set_package_properties(ECM PROPERTIES TYPE REQUIRED DESCRIPTION "Extra CMake Modules." URL "https://commits.kde.org/extra-cmake-modules")
 feature_summary(WHAT REQUIRED_PACKAGES_NOT_FOUND FATAL_ON_MISSING_REQUIRED_PACKAGES)
 
 set(CMAKE_MODULE_PATH ${ECM_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)
 
-set(REQUIRED_QT_VERSION 5.15.0)
+set(REQUIRED_QT_VERSION 5.6.0)
 
 include(KDEInstallDirs)
 include(KDECMakeSettings)
-include(KDEGitCommitHooks)
 include(KDEFrameworkCompilerSettings NO_POLICY_SCOPE)
 
 include(ECMGenerateExportHeader)
@@ -125,5 +124,3 @@ if (NOT WIN32)
 endif()
 
 feature_summary(WHAT ALL FATAL_ON_MISSING_REQUIRED_PACKAGES)
-
-kde_configure_git_pre_commit_hook(CHECKS CLANG_FORMAT)
diff --git a/autotests/testdateserialization.cpp b/autotests/testdateserialization.cpp
index 4c821d45b..9bc28ff9c 100644
--- a/autotests/testdateserialization.cpp
+++ b/autotests/testdateserialization.cpp
@@ -19,7 +19,11 @@ using namespace KCalendarCore;
 // See bug 345498.
 void TestDateSerialization::testNewRecurringTodo()
 {
+#if QT_VERSION >= QT_VERSION_CHECK(5, 14, 0)
     QDateTime startDate = QDate(2015, 3, 24).startOfDay();
+#else
+    QDateTime startDate { QDate(2015, 3, 24) };
+#endif
     QDateTime dueDate{startDate.addDays(1)};
 
     Todo::Ptr todo(new Todo);
@@ -50,7 +54,11 @@ void TestDateSerialization::testNewRecurringTodo()
 // See bug 345565.
 void TestDateSerialization::testTodoCompletedOnce()
 {
+#if QT_VERSION >= QT_VERSION_CHECK(5, 14, 0)
     QDateTime startDate = QDate::currentDate().startOfDay();
+#else
+    QDateTime startDate { QDate::currentDate() };
+#endif
     QDateTime dueDate{startDate.addDays(1)};
 
     Todo::Ptr todo(new Todo);
diff --git a/autotests/testfreebusyperiod.cpp b/autotests/testfreebusyperiod.cpp
index 118838b33..b686efb9c 100644
--- a/autotests/testfreebusyperiod.cpp
+++ b/autotests/testfreebusyperiod.cpp
@@ -84,7 +84,11 @@ void FreeBusyPeriodTest::testDataStreamOut()
 
 void FreeBusyPeriodTest::testDataStreamIn()
 {
+#if QT_VERSION >= QT_VERSION_CHECK(5, 14, 0)
     const QDateTime p1DateTime = QDate(2006, 8, 30).startOfDay();
+#else
+    const QDateTime p1DateTime(QDate(2006, 8, 30));
+#endif
     const Duration duration(24 * 60 * 60);
     FreeBusyPeriod p1(p1DateTime, duration);
     p1.setSummary(QStringLiteral("I can haz summary?"));
diff --git a/autotests/testicalformat.cpp b/autotests/testicalformat.cpp
index 389c3ef49..59bf674bf 100644
--- a/autotests/testicalformat.cpp
+++ b/autotests/testicalformat.cpp
@@ -203,7 +203,11 @@ void ICalFormatTest::testAlarm()
     ICalFormat format;
 
     Event::Ptr event(new Event);
+#if QT_VERSION >= QT_VERSION_CHECK(5, 14, 0)
     event->setDtStart(QDate(2017, 03, 24).startOfDay());
+#else
+    event->setDtStart(QDateTime(QDate(2017, 03, 24)));
+#endif
     Alarm::Ptr alarm = event->newAlarm();
     alarm->setType(Alarm::Display);
     alarm->setStartOffset(Duration(0));
@@ -247,7 +251,7 @@ void ICalFormatTest::testDateTimeSerialization()
     const QList<QByteArray> lines = output.split('\n');
     for (const QByteArray &line: lines) {
         if (line.startsWith(QByteArray("DTSTART"))) {
-            QCOMPARE(line.chopped(1), dtStartData);
+            QCOMPARE(line.left(line.size() - 1), dtStartData);
             break;
         }
     }
diff --git a/autotests/testmemorycalendar.cpp b/autotests/testmemorycalendar.cpp
index b5e73a861..ccc99fb72 100644
--- a/autotests/testmemorycalendar.cpp
+++ b/autotests/testmemorycalendar.cpp
@@ -150,7 +150,7 @@ void MemoryCalendarTest::testIncidences()
 
     QVERIFY(store.load());
     Todo::Ptr todo = cal->incidence(QStringLiteral("4")).staticCast<Todo>();
-    QVERIFY(todo->uid() == QLatin1Char('4'));
+    QCOMPARE(todo->uid(), QStringLiteral("4"));
     QVERIFY(todo->summaryIsRich());
     QVERIFY(todo->locationIsRich());
     cal->close();
diff --git a/autotests/testrecurtodo.cpp b/autotests/testrecurtodo.cpp
index cc978f7ac..5829e3702 100644
--- a/autotests/testrecurtodo.cpp
+++ b/autotests/testrecurtodo.cpp
@@ -163,7 +163,12 @@ void RecurTodoTest::testRecurTodo_data()
     QTest::addColumn<QDateTime>("dtdue");
 
     // Can't use QDateTime::currentDateTimeUtc() due to milliseconds mismatching
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
     const QDateTime today = QDateTime::fromSecsSinceEpoch(QDateTime::currentSecsSinceEpoch(), Qt::UTC);
+#else
+    qint64 msecs = QDateTime::currentMSecsSinceEpoch() / 1000;
+    const QDateTime today = QDateTime::fromMSecsSinceEpoch(msecs * 1000, Qt::UTC);
+#endif
     const QDateTime tomorrow = today.addDays(1);
     const QDateTime invalid;
 
diff --git a/autotests/testtimesininterval.cpp b/autotests/testtimesininterval.cpp
index cff2aac18..1759f2803 100644
--- a/autotests/testtimesininterval.cpp
+++ b/autotests/testtimesininterval.cpp
@@ -192,7 +192,11 @@ void TimesInIntervalTest::testLocalTimeHandlingAllDay()
     // Create an event which occurs every weekday of every week,
     // starting from Friday the 11th of October, and lasts for two weeks,
     // with four exception datetimes (only three of which will apply).
+#if QT_VERSION >= QT_VERSION_CHECK(5, 14, 0)
     const QDateTime startDt(QDate(2019, 10, 11).startOfDay());
+#else
+    const QDateTime startDt(QDate(2019, 10, 11));
+#endif
     QTimeZone anotherZone("America/Toronto");
     if (anotherZone.offsetFromUtc(startDt) == QTimeZone::systemTimeZone().offsetFromUtc(startDt)) {
         anotherZone = QTimeZone(QByteArray("Pacific/Midway"));
@@ -217,7 +221,11 @@ void TimesInIntervalTest::testLocalTimeHandlingAllDay()
     // A simple date, will apply.
     recurrence->addExDate(QDate(2019, 10, 14));
     // A date only local time, will apply.
+#if QT_VERSION >= QT_VERSION_CHECK(5, 14, 0)
     recurrence->addExDateTime(QDate(2019, 10, 15).startOfDay());
+#else
+    recurrence->addExDateTime(QDateTime(QDate(2019, 10, 15)));
+#endif
     // A date time starting at 00:00 in another zone, will not apply.
     recurrence->addExDateTime(QDateTime(QDate(2019, 10, 17), QTime(), anotherZone));
     // A date time starting at 00:00 in the system time zone, will apply.
@@ -231,7 +239,11 @@ void TimesInIntervalTest::testLocalTimeHandlingAllDay()
     // nor either of the exception date times.
     const QList<int> expectedDays{11, 16, 17, 18, 21, 22, 23, 25};
     for (int day : expectedDays) {
+#if QT_VERSION >= QT_VERSION_CHECK(5, 14, 0)
         QVERIFY(timesInInterval.contains(QDate(2019, 10, day).startOfDay()));
+#else
+        QVERIFY(timesInInterval.contains(QDateTime(QDate(2019, 10, day))));
+#endif
     }
     QCOMPARE(timesInInterval.size(), expectedDays.size());
 }
diff --git a/src/calendar.cpp b/src/calendar.cpp
index 8053c3fc6..71133499f 100644
--- a/src/calendar.cpp
+++ b/src/calendar.cpp
@@ -27,6 +27,7 @@
 #include "icaltimezones_p.h"
 #include "sorting.h"
 #include "visitor.h"
+#include "utils_p.h"
 
 #include "kcalendarcore_debug.h"
 
diff --git a/src/icalformat.cpp b/src/icalformat.cpp
index d655599cc..17c8befbf 100644
--- a/src/icalformat.cpp
+++ b/src/icalformat.cpp
@@ -21,6 +21,7 @@
 #include "icaltimezones_p.h"
 #include "kcalendarcore_debug.h"
 #include "memorycalendar.h"
+#include "utils_p.h"
 
 #include <QFile>
 #include <QSaveFile>
diff --git a/src/icalformat_p.cpp b/src/icalformat_p.cpp
index c09266b1e..a11a5f7ba 100644
--- a/src/icalformat_p.cpp
+++ b/src/icalformat_p.cpp
@@ -28,6 +28,7 @@
 #include "incidencebase.h"
 #include "memorycalendar.h"
 #include "visitor.h"
+#include "utils_p.h"
 
 #include "kcalendarcore_debug.h"
 
@@ -1724,7 +1725,7 @@ void ICalFormatImpl::readIncidence(icalcomponent *parent, const Incidence::Ptr &
             // We can't change that -- in order to retain backwards compatibility.
             text = icalproperty_get_categories(p);
             const QString val = QString::fromUtf8(text);
-            const QStringList lstVal = val.split(QLatin1Char(','), Qt::SkipEmptyParts);
+            const QStringList lstVal = val.split(QLatin1Char(','), QString::SkipEmptyParts);
             for (const QString &cat : lstVal) {
                 // ensure no duplicates
                 if (!categories.contains(cat)) {
@@ -2471,7 +2472,9 @@ QDateTime ICalFormatImpl::readICalDateTimeProperty(icalproperty *p, const ICalTi
             break;
         }
     } // end of ICAL_X_PROPERTY
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
         Q_FALLTHROUGH();
+#endif
     default:
         switch (kind) {
         case ICAL_RDATE_PROPERTY:
diff --git a/src/occurrenceiterator.cpp b/src/occurrenceiterator.cpp
index 3d8bf3580..e797cb206 100644
--- a/src/occurrenceiterator.cpp
+++ b/src/occurrenceiterator.cpp
@@ -19,6 +19,7 @@
 #include "occurrenceiterator.h"
 #include "calendar.h"
 #include "calfilter.h"
+#include "utils_p.h"
 
 #include <QDate>
 
diff --git a/src/recurrencerule.cpp b/src/recurrencerule.cpp
index 5c8a3c9e2..7547a9c6c 100644
--- a/src/recurrencerule.cpp
+++ b/src/recurrencerule.cpp
@@ -647,19 +647,29 @@ bool Constraint::readDateTime(const QDateTime &dt, RecurrenceRule::PeriodType ty
     // Really fall through! Only weekly needs to be treated differently!
     case RecurrenceRule::rSecondly:
         second = dt.time().second();
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
         Q_FALLTHROUGH();
+#endif
     case RecurrenceRule::rMinutely:
         minute = dt.time().minute();
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
         Q_FALLTHROUGH();
+#endif
     case RecurrenceRule::rHourly:
         hour = dt.time().hour();
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
         Q_FALLTHROUGH();
+#endif
     case RecurrenceRule::rDaily:
         day = dt.date().day();
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
         Q_FALLTHROUGH();
+#endif
     case RecurrenceRule::rMonthly:
         month = dt.date().month();
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
         Q_FALLTHROUGH();
+#endif
     case RecurrenceRule::rYearly:
         year = dt.date().year();
         break;
@@ -1243,28 +1253,38 @@ void RecurrenceRule::Private::buildConstraints()
         if (mByDays.isEmpty() && mByWeekNumbers.isEmpty() && mByYearDays.isEmpty() && mByMonths.isEmpty()) {
             fixConstraint(setMonth, mDateStart.date().month());
         }
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
         Q_FALLTHROUGH();
+#endif
     case rMonthly:
         if (mByDays.isEmpty() && mByWeekNumbers.isEmpty() && mByYearDays.isEmpty() && mByMonthDays.isEmpty()) {
             fixConstraint(setDay, mDateStart.date().day());
         }
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
         Q_FALLTHROUGH();
+#endif
     case rWeekly:
     case rDaily:
         if (mByHours.isEmpty()) {
             fixConstraint(setHour, mDateStart.time().hour());
         }
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
         Q_FALLTHROUGH();
+#endif
     case rHourly:
         if (mByMinutes.isEmpty()) {
             fixConstraint(setMinute, mDateStart.time().minute());
         }
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
         Q_FALLTHROUGH();
+#endif
     case rMinutely:
         if (mBySeconds.isEmpty()) {
             fixConstraint(setSecond, mDateStart.time().second());
         }
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
         Q_FALLTHROUGH();
+#endif
     case rSecondly:
     default:
         break;
@@ -1815,10 +1835,14 @@ Constraint RecurrenceRule::Private::getPreviousValidDateInterval(const QDateTime
     // by the factor 60 and 60*60! Same for weekly and daily (factor 7)
     case rHourly:
         modifier *= 60;
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
         Q_FALLTHROUGH();
+#endif
     case rMinutely:
         modifier *= 60;
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
         Q_FALLTHROUGH();
+#endif
     case rSecondly:
         periods = static_cast<int>(start.secsTo(toDate) / modifier);
         // round it down to the next lower multiple of frequency:
@@ -1831,7 +1855,9 @@ Constraint RecurrenceRule::Private::getPreviousValidDateInterval(const QDateTime
         toDate = toDate.addDays(-(7 + toDate.date().dayOfWeek() - mWeekStart) % 7);
         start = start.addDays(-(7 + start.date().dayOfWeek() - mWeekStart) % 7);
         modifier *= 7;
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
         Q_FALLTHROUGH();
+#endif
     case rDaily:
         periods = start.daysTo(toDate) / modifier;
         // round it down to the next lower multiple of frequency:
@@ -1888,10 +1914,14 @@ Constraint RecurrenceRule::Private::getNextValidDateInterval(const QDateTime &dt
     // by the factor 60 and 60*60! Same for weekly and daily (factor 7)
     case rHourly:
         modifier *= 60;
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
         Q_FALLTHROUGH();
+#endif
     case rMinutely:
         modifier *= 60;
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
         Q_FALLTHROUGH();
+#endif
     case rSecondly:
         periods = static_cast<int>(start.secsTo(toDate) / modifier);
         periods = qMax(0L, periods);
@@ -1905,7 +1935,9 @@ Constraint RecurrenceRule::Private::getNextValidDateInterval(const QDateTime &dt
         toDate = toDate.addDays(-(7 + toDate.date().dayOfWeek() - mWeekStart) % 7);
         start = start.addDays(-(7 + start.date().dayOfWeek() - mWeekStart) % 7);
         modifier *= 7;
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
         Q_FALLTHROUGH();
+#endif
     case rDaily:
         periods = start.daysTo(toDate) / modifier;
         periods = qMax(0L, periods);
diff --git a/src/utils_p.h b/src/utils_p.h
index ac52d65d2..3c2d1b27c 100644
--- a/src/utils_p.h
+++ b/src/utils_p.h
@@ -29,6 +29,14 @@ void deserializeQDateTimeList(QDataStream &in, QList<QDateTime> &list);
 void serializeQTimeZoneAsSpec(QDataStream &out, const QTimeZone &tz);
 void deserializeSpecAsQTimeZone(QDataStream &in, QTimeZone &tz);
 
+#if (QT_VERSION < QT_VERSION_CHECK(5, 7, 0))
+template <typename T>
+const T& qAsConst(T &t)
+{
+  return const_cast<const T&>(t);
+}
+#endif
+
 }
 
 #endif
-- 
2.31.1

